#!/usr/bin/env python

import thread
import os
import time
import sys
import traceback
from serial.serialutil import SerialException
import serial
import rospy
from sensor_msgs.msg import Range


class VA500:
    """
    Enumeration of available messages
    https://www.valeport.co.uk/content/uploads/2020/03/VA500-Altimeter-Operating-Manual-0430844f.pdf  # noqa
    """
    # Instrument settings
    GET_SW_VERSION = '#032'
    GET_UNIT_SERIAL_NUM = '#034'
    GET_PCB_SERIAL_NUM = '#136'
    GET_CALIBRATION_DATE = '#138'
    GET_TRANSDUCER_FREQ = '#839'

    # Communication settings
    SET_BAUD_RATE = '#059'
    SET_ADDRESS_485 = '#001'
    ADDRESS_485 = '#002'
    ADDRESS_MODE_CONF = '#005'
    ADDRESS_MODE = '#006'

    # Analogue settings
    SET_VOLTAGE_RANGE = '#094'
    GET_VOLTAGE_RANGE = '#095'
    ANALOG_OUTPUT_TEST = '#096'
    SET_ANALOG_RANGE_LIMIT = '#097'
    GET_ANALOG_RANGE_LIMIT = '#098'

    # Sampling regime
    SINGLE_MEASURE = 'S'
    CONTINUOUS_MEASURE = 'M'
    CONFIGURE = '#'
    SET_MEASURE_MODE = '#039'
    GET_MEASURE_MODE = '#040'
    RUN = '#028'

    # Output format
    GET_OUTPUT_FORMAT = '#089'
    SET_OUTPUT_FORMAT = '#082'

    # Range settings

    SET_RANGE_UNITS = '#021'
    GET_RANGE_UNITS = '#022'
    SET_ERROR_MSG = '#118'
    GET_ERROR_MSG = '#119'
    SET_MAX_RANGE = '#823'
    GET_MAX_RANGE = '#824'
    SET_MIN_RANGE = '#840'
    GET_MIN_RANGE = '#841'
    SET_SOUND_SPEED = '#830'
    GETSOUND_SPEED = '#831'

    # Headers
    DATA_HEADER = "$"
    CONFIGURE_HEADER = ">"

    def __init__(
        self,
        port="/dev/ttyUSB0",
        baudrate=115200,
        timeout=2.0,
        max_range_m=100.0,
        min_range_m=1.0,
        frame_id='altimeter',
    ):
        self.port = port
        self.baudrate = baudrate
        self.timeout = timeout
        self.writeTimeout = timeout
        self.interCharTimeout = timeout / 30.0

        # Keep things thread safe
        self.mutex = thread.allocate_lock()
        self.connect()

        res = '$'
        self.send(self.CONFIGURE)
        self.send(self.CONFIGURE, cr=False)
        while self.CONFIGURE_HEADER not in res:
            res = self.recv()
            rospy.loginfo('Waiting for a ">" response: %s', res)
        self.port.reset_input_buffer()
        self.port.reset_output_buffer()
        self.set_or_get(self.SET_MAX_RANGE, max_range_m)
        self.set_or_get(self.SET_MIN_RANGE, min_range_m)
        self.set_or_get(self.SET_MEASURE_MODE, 'M1')
        self.execute(self.RUN)

        rospy.loginfo("Valeport altimeter node is up!")
        rospy.loginfo("\t* port: %s", port)
        rospy.loginfo("\t* baudrate: %s", baudrate)
        rospy.loginfo("\t* frame_id: %s", frame_id)
        rospy.loginfo("\t* max_range: %s", max_range_m)
        rospy.loginfo("\t* min_range: %s", min_range_m)

        # Publish extracted data in personalised msg
        self.pub = rospy.Publisher("driftcam/range", Range, queue_size=1)

        self.range_msg = Range()
        self.range_msg.radiation_type = 2  # Source radiation: sound
        self.range_msg.field_of_view = 0.1  # the size of the arc [rad]
        self.range_msg.header.frame_id = frame_id
        self.range_msg.min_range = float(min_range_m)
        self.range_msg.max_range = float(max_range_m)

    def connect(self):
        try:
            rospy.loginfo(
                "Connecting to Valeport Altimeter on port %s...",
                self.port)
            self.port = serial.Serial(
                port=self.port,
                baudrate=self.baudrate,
                timeout=self.timeout,
                writeTimeout=self.writeTimeout,
                bytesize=serial.EIGHTBITS,
                parity=serial.PARITY_NONE,
                stopbits=serial.STOPBITS_ONE,
            )
            # The next line is necessary to give the firmware time to wake up.
            time.sleep(1)
            rospy.loginfo("Connected at %s", self.baudrate)
            rospy.loginfo("VA500 is ready.")

        except SerialException:
            rospy.logerr("Serial Exception:")
            rospy.logerr(sys.exc_info())
            rospy.logerr("Traceback follows:")
            traceback.print_exc(file=sys.stdout)
            rospy.logerr("Cannot connect to altimeter!")
            os._exit(1)

    def open(self):
        """Open the serial port."""
        self.port.open()

    def close(self):
        """Close the serial port."""
        self.port.close()

    def send(self, cmd, cr=True):
        """
        This command should not be used on its own: it is called
        by the execute commands below in a thread safe manner.
        """
        # print('Sending command', cmd)
        if cr:
            self.port.write(cmd + '\r\n')
        else:
            self.port.write(cmd)
        self.port.flush()

    def recv(self, timeout=2.0):
        """ 
        This command should not be used on its own: it is called by 
        the  execute commands below in a thread safe manner. 
        """
        timeout = min(timeout, self.timeout)
        c = ""
        value = ""
        attempts = 0
        while c != "\r" and not rospy.is_shutdown():
            c = self.port.read(1)
            value += c
            attempts += 1
            if c == self.CONFIGURE_HEADER:
                # print('Received', value)
                return c
            if attempts * self.interCharTimeout > timeout:
                # print('Recv timed out with', value)
                return None

        # print('Received', value)
        value = value.strip("\r").strip('\n')
        return value

    def execute(self, cmd):
        """Thread safe execution of "cmd" returning no value."""
        self.mutex.acquire()

        try:
            self.port.flushInput()
        except:
            pass

        try:
            self.send(cmd)
            time.sleep(1)
            reply = self.recv()

            if reply == cmd:
                rospy.loginfo('Command %s succeeed', cmd)
            else:
                rospy.loginfo('Command did not succeed %s', reply)
                return False
        except:
            self.mutex.release()
            rospy.logerr("Exception executing command: " + cmd)
            
        self.mutex.release()
        return True

    def set_or_get(self, cmd, input_value=None):
        """Thread safe execution of "cmd" returning a value."""
        self.mutex.acquire()

        try:
            self.port.flushInput()
        except:
            pass

        value = None

        try:
            formated_cmd = cmd
            if input_value is not None:
                if type(input_value) is str:
                    formated_cmd = cmd + ';' + input_value
                else:
                    formated_cmd = cmd + ';' + str(int(input_value))
            self.send(formated_cmd)
            time.sleep(1)
            reply = self.recv()
            value = self.recv()
            ret = self.recv()

            if formated_cmd == reply and ret == self.CONFIGURE_HEADER:
                rospy.loginfo('Command %s returned %s', cmd, value)
            else:
                rospy.logerr('Command did not succeed')
                rospy.logerr(reply, value, ret)
        except:
            self.mutex.release()
            rospy.logerr("Exception executing command: %s", cmd)
            
        self.mutex.release()
        return value

    def scan(self):
        res = self.recv()
        if res is None:
            rospy.logwarn('Altimeter is not running...')
            return
        if res[0] != self.DATA_HEADER:
            rospy.logwarn('Altimeter is not running...')
            return
        values = res.split(',')
        self.range_msg.header.stamp = rospy.Time.now()
        print values
        if len(values) > 1:
            self.range_msg.range = float(values[1])
            self.pub.publish(self.range_msg)


def main():
    # Initialize node
    rospy.init_node("altimeter_node", log_level=rospy.DEBUG)

    # Add private parameters
    port = rospy.get_param("~port", "/dev/ttyUSB0")
    baudrate = rospy.get_param("~baudrate", 115200)
    rate_hz = rospy.get_param("~rate_hz", 1)
    frame_id = rospy.get_param("~frame_id", "valeport_altimeter")
    min_range_m = rospy.get_param("~min_range_m", 0)
    max_range_m = rospy.get_param("~max_range_m", 100)

    va500_altimeter = VA500(
        port=port, 
        baudrate=baudrate, 
        frame_id=frame_id, 
        min_range_m=min_range_m, 
        max_range_m=max_range_m)

    r = rospy.Rate(rate_hz)
    while not rospy.is_shutdown():
        va500_altimeter.scan()
        r.sleep()


if __name__ == "__main__":
    main()
